---
import { getGistGroup } from "../lib"
import { Code } from "../ExpressiveCode";

export interface Props {
    /** REQUIRED: Used to define the desired GitHub Gist ID */
    gistId: string;
    /** OPTIONAL: Allows the user to Enable and Disable LineNumbers
     * @default true
     */
    showLineNumbers?: boolean;
    /** OPTIONAL: Allows the user to Enable and Disable LineWrapping
     * @default true
     */
    wrap?: boolean;
}

// extract the props
const { gistId, wrap, showLineNumbers } = Astro.props as Props;

// set the defaults
const WRAP = wrap ? wrap : wrap === undefined ? true : false;
const SLN = showLineNumbers ? showLineNumbers : showLineNumbers === undefined ? true : false;

// get the Gist
const Gist = await getGistGroup(gistId);

// Define the GistResponse type
type GistFile = {
    filename: string;
    type: string;
    language: string;
    raw_url: string;
    size: number;
    content: string;
};

type GistFiles = {
    [key: string]: GistFile
};

let files = {} as GistFiles;

let noGist: boolean

if (Gist) {
    noGist = false;
    files = Gist.files as GistFiles;
} else {
    noGist = true;
}

---
{ noGist && (
    <div>
        <h1>Sorry, the Gist with ID: {gistId} was not found</h1>
    </div>
) }
{ !noGist && (
    <div>
        {Object.keys(files).map((file) => {
            const { content, filename, language, raw_url } = files[file] as GistFile;
            return (
                <Code
                    title={filename} wrap={WRAP}
                    code={content} raw_url={raw_url}
                    lang={language.toLowerCase()} 
                    showLineNumbers={SLN}
                />
            );
        })}
    </div>
) }

